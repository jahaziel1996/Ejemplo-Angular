{
  "_args": [
    [
      {
        "raw": "@webcomponents/custom-elements@github:onsenui/custom-elements#1.0.0-rc.3+mod.20170410.1",
        "scope": "@webcomponents",
        "escapedName": "@webcomponents%2fcustom-elements",
        "name": "@webcomponents/custom-elements",
        "rawSpec": "github:onsenui/custom-elements#1.0.0-rc.3+mod.20170410.1",
        "spec": "github:onsenui/custom-elements#1.0.0-rc.3+mod.20170410.1",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:onsenui/custom-elements.git#1.0.0-rc.3+mod.20170410.1",
          "sshUrl": "git+ssh://git@github.com/onsenui/custom-elements.git#1.0.0-rc.3+mod.20170410.1",
          "httpsUrl": "git+https://github.com/onsenui/custom-elements.git#1.0.0-rc.3+mod.20170410.1",
          "gitUrl": "git://github.com/onsenui/custom-elements.git#1.0.0-rc.3+mod.20170410.1",
          "shortcut": "github:onsenui/custom-elements#1.0.0-rc.3+mod.20170410.1",
          "directUrl": "https://raw.githubusercontent.com/onsenui/custom-elements/1.0.0-rc.3%2Bmod.20170410.1/package.json"
        }
      },
      "c:\\Ounsen\\node_modules\\onsenui"
    ]
  ],
  "_from": "onsenui/custom-elements#1.0.0-rc.3+mod.20170410.1",
  "_id": "@webcomponents/custom-elements@1.0.0-rc.3",
  "_inCache": true,
  "_location": "/@webcomponents/custom-elements",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@webcomponents/custom-elements@github:onsenui/custom-elements#1.0.0-rc.3+mod.20170410.1",
    "scope": "@webcomponents",
    "escapedName": "@webcomponents%2fcustom-elements",
    "name": "@webcomponents/custom-elements",
    "rawSpec": "github:onsenui/custom-elements#1.0.0-rc.3+mod.20170410.1",
    "spec": "github:onsenui/custom-elements#1.0.0-rc.3+mod.20170410.1",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:onsenui/custom-elements.git#1.0.0-rc.3+mod.20170410.1",
      "sshUrl": "git+ssh://git@github.com/onsenui/custom-elements.git#1.0.0-rc.3+mod.20170410.1",
      "httpsUrl": "git+https://github.com/onsenui/custom-elements.git#1.0.0-rc.3+mod.20170410.1",
      "gitUrl": "git://github.com/onsenui/custom-elements.git#1.0.0-rc.3+mod.20170410.1",
      "shortcut": "github:onsenui/custom-elements#1.0.0-rc.3+mod.20170410.1",
      "directUrl": "https://raw.githubusercontent.com/onsenui/custom-elements/1.0.0-rc.3%2Bmod.20170410.1/package.json"
    }
  },
  "_requiredBy": [
    "/onsenui"
  ],
  "_resolved": "git://github.com/onsenui/custom-elements.git#bf2f0a4aee940223cfa7eb18e29bd1da51edb90f",
  "_shasum": "a683058d4db7d977445d808cc0f199a870910d8c",
  "_shrinkwrap": null,
  "_spec": "@webcomponents/custom-elements@github:onsenui/custom-elements#1.0.0-rc.3+mod.20170410.1",
  "_where": "c:\\Ounsen\\node_modules\\onsenui",
  "author": {
    "name": "The Polymer Authors"
  },
  "bugs": {
    "url": "https://github.com/webcomponents/custom-elements/issues"
  },
  "dependencies": {},
  "description": "HTML Custom Elements Polyfill",
  "devDependencies": {
    "bower": "^1.8.0",
    "google-closure-compiler": "^20170124.0.0",
    "gulp": "^3.8.8",
    "gulp-sourcemaps": "^1.6.0",
    "rollup-stream": "^1.14.0",
    "vinyl-source-stream": "^1.1.0",
    "web-component-tester": "^6.0.0-prerelease.3"
  },
  "directories": {
    "test": "tests"
  },
  "gitHead": "bf2f0a4aee940223cfa7eb18e29bd1da51edb90f",
  "homepage": "http://webcomponents.org",
  "license": "BSD-3-Clause",
  "main": "custom-elements.min.js",
  "name": "@webcomponents/custom-elements",
  "optionalDependencies": {},
  "readme": "# Custom Elements (v1) Polyfill [![Build Status](https://travis-ci.org/webcomponents/custom-elements.svg?branch=master)](https://travis-ci.org/webcomponents/custom-elements)\r\n\r\nA polyfill for the [custom elements](https://html.spec.whatwg.org/multipage/scripting.html#custom-elements)\r\nv1 spec.\r\n\r\n## Using\r\n\r\nInclude `custom-elements.min.js` at the beginning of your page, *before* any code that\r\nmanipulates the DOM:\r\n```html\r\n<script src=\"custom-elements.min.js\"></script>\r\n```\r\n\r\n## Developing\r\n\r\n1. Install and build\r\n\r\n  ```\r\n  npm install\r\n  npm run build\r\n  ```\r\n  (Or, `npm i && gulp`, if [gulp](https://github.com/gulpjs/gulp) is installed globally.)\r\n\r\n1. Test\r\n\r\n  ```\r\n  npm run test\r\n  ```\r\n  (Or, [`wct`](https://github.com/Polymer/web-component-tester), if installed\r\n  globally.)\r\n\r\n## Custom element reactions in the DOM and HTML specs\r\n\r\nAPI which might trigger custom element reactions in the [DOM](https://dom.spec.whatwg.org/)\r\nand [HTML](https://html.spec.whatwg.org/) specifications are marked with the\r\n[`CEReactions` extended attribute](https://html.spec.whatwg.org/multipage/scripting.html#cereactions).\r\n\r\n## Known Bugs and Limitations\r\n\r\n- `adoptedCallback` is not supported.\r\n- Changing an attribute of a customizable (but uncustomized) element will not\r\n  cause that element to upgrade.\r\n- Only DOM API is patched. Notably, this excludes API from the HTML spec marked\r\n  with the `CEReactions` extended attribute.\r\n  - Unpatched API from the DOM spec:\r\n    - Setters on `Element` for `id`, `className`, and `slot`.\r\n    - `DOMTokenList` (`element.classList`)\r\n    - `NamedNodeMap` (`element.attributes`)\r\n    - `Attr` (`element.attributes.getNamedItem('attr-name')`)\r\n- The [custom element reactions stack](https://html.spec.whatwg.org/multipage/scripting.html#custom-element-reactions-stack)\r\n  is not implemented.\r\n  - Typically, DOM operations patched in this polyfill gather the list of\r\n    elements to which a given callback would apply and then iterate that list,\r\n    calling the callback on each element. This mechanism breaks down if an\r\n    element's callback performs another DOM operation that manipulates an area\r\n    of the tree that was captured in the outer operation's list of elements.\r\n    When this happens, the callbacks from the inner DOM operation will be called\r\n    *before* those of the outer DOM operation (typically, depending on the patch\r\n    implementation), as opposed to a spec-compliant implementation where the\r\n    callbacks are always run in the order they were inserted into each\r\n    particular element's reaction queue.\r\n- Custom elements created by the UA's parser are customized as if they were\r\n  upgraded, rather than constructed.\r\n  - These elements are only learned about *after* they have been constructed,\r\n    and typically after their descendants have been constructed. When these\r\n    elements are constructed, their children are visible and editable *even\r\n    though they would not yet exist and manipulating them would throw in a\r\n    spec-compliant implementation of custom elements!*\r\n- The [requirements for custom element constructors](https://html.spec.whatwg.org/multipage/scripting.html#custom-element-conformance)\r\n  are not enforced.\r\n  - These requirements are not generally enforcable in user script because of\r\n    the ability to use the `new` operator on a custom element constructor. This\r\n    means there is no way to know when a call to a constructor has begun or\r\n    finished.\r\n- Methods of the `ParentNode` and `ChildNode` interfaces do not support\r\n  `DocumentFragment`s as arguments.\r\n- Your custom element constructor's prototype *must* have a property named\r\n  `constructor` which is that constructor.\r\n  - By default, for every constructable function `F`, `F.prototype.constructor === F`.\r\n    If you replace the prototype of your constructor `F`, you must make sure\r\n    that `F.prototype.constructor === F` remains true. Otherwise, the polyfill\r\n    will not be able to create or upgrade your custom elements.\r\n\r\n### ES5 vs ES2015\r\n\r\nThe custom elements v1 spec is not compatible with ES5 style classes. This means\r\nES2015 code compiled to ES5 will not work with a native implementation of Custom\r\nElements.[0] While it's possible to force the custom elements polyfill to be\r\nused to workaround this issue (by setting (`customElements.forcePolyfill = true;`\r\nbefore loading the polyfill), you will not be using the UA's native\r\nimplementation in that case.\r\n\r\nSince this is not ideal, we've provided an alternative:\r\n[native-shim.js](https://github.com/webcomponents/custom-elements/blob/master/src/native-shim.js).\r\nLoading this shim minimally augments the native implementation to be compatible\r\nwith ES5 code. We are also working on some future refinements to this approach\r\nthat will improve the implementation and automatically detect if it's needed.\r\n\r\n[0] The spec requires that an element call the `HTMLElement` constructor.\r\nTypically an ES5 style class would do something like `HTMLElement.call(this)` to\r\nemulate `super()`. However, `HTMLElement` *must* be called as a constructor and\r\nnot as a plain function, i.e. with `Reflect.construct(HTMLElement, [], MyCEConstructor)`,\r\nor it will throw.\r\n\r\n### Parser-created elements in the main document\r\n\r\nBy default, the polyfill uses a `MutationObserver` to learn about and upgrade\r\nelements in the main document as they are parsed. This `MutationObserver` is\r\nattached to `document` synchronously when the script is run.\r\n- If you attach a `MutationObserver` earlier before loading the polyfill, that\r\n  mutation observer will not see upgraded custom elements.\r\n- If you move a node with descendants that have not yet been inserted by the\r\n  parser out of the main document, those nodes will not be noticed or upgraded\r\n  (until another action would trigger an upgrade).\r\n\r\nNote: Using `polyfillWrapFlushCallback` disconnects this `MutationObserver`.\r\n\r\n### `customElements.polyfillWrapFlushCallback`\r\n\r\ntl;dr: The polyfill gets slower as the size of your page and number of custom\r\nelement definitons increases. You can use `polyfillWrapFlushCallback` to prevent\r\nredundant work.\r\n\r\nTo avoid a potential memory leak, the polyfill does not maintain a list of upgrade\r\ncandidates. This means that calling `customElements.define` causes a synchronous,\r\nfull-document walk to search for elements with `localName`s matching the new\r\ndefinition. Given that this operation is potentially expensive and, if your page\r\nloads many custom element definitions before using any of them, highly redundant,\r\nan extra method is added to the `CustomElementRegistry` prototype -\r\n`polyfillWrapFlushCallback`.\r\n\r\n`polyfillWrapFlushCallback` allows you to block the synchronous, full-document\r\nupgrade attempts made when calling `define` and perform them later. Call\r\n`polyfillWrapFlushCallback` with a function; the next time `customElements.define`\r\nis called and a full-document upgrade would happen, your function will be called\r\ninstead. The only argument to your function is *another* function which, when\r\ncalled, will run the full-document upgrade attempt.\r\n\r\nFor example, if you wanted to delay upgrades until the document's ready state\r\nwas `'complete'`, you could use the following:\r\n\r\n```javascript\r\ncustomElements.polyfillWrapFlushCallback(function(flush) {\r\n  if (document.readyState === 'complete') {\r\n    // If the document is already complete, flush synchronously.\r\n    flush();\r\n  } else {\r\n    // Otherwise, wait until it is complete.\r\n    document.addEventListener('readystatechange', function() {\r\n      if (document.readyState === 'complete') {\r\n        flush();\r\n      }\r\n    });\r\n  }\r\n});\r\n```\r\n\r\nOnce your wrapper function is called (because the polyfill wants to upgrade the\r\ndocument), it will not be called again until you have triggered the\r\nfull-document upgrade attempt. If multiple definitions are registered before you\r\ntrigger upgrades, all of those definitions will apply when you trigger upgrades -\r\ndon't call the provided function multiple times.\r\n\r\nPromises returned by `customElements.whenDefined` will not resolve until a\r\nfull-document upgrade attempt has been performed *after* the given local name\r\nhas been defined.\r\n\r\n```javascript\r\nlet flush;\r\ncustomElements.polyfillWrapFlushCallback(f => flush = f);\r\n\r\nconst p = customElements.whenDefined('c-e', () => console.log('c-e defined'));\r\n\r\ncustomElements.define('c-e', class extends HTMLElement {});\r\n// `p` is not yet resolved; `flush` is now a function.\r\n\r\nflush(); // Resolves `p`.\r\n```\r\n\r\nYou can't remove a callback given to `polyfillWrapFlushCallback`. If the\r\ncondition your callback was intended to wait on is no longer important, your\r\ncallback should call the given function synchronously. (See the\r\n`document.readyState` example above.)\r\n\r\n**Calling `polyfillWrapFlushCallback` disconnects the `MutationObserver` watching\r\nthe main document.** This means that you must delay until at least\r\n`document.readyState !== 'loading'` to be sure that all elements in the main\r\ndocument are found (subject to exceptions mentioned in the section above).\r\n\r\nYou can call `polyfillWrapFlushCallback` multiple times, each function given\r\nwill automatically wrap and delay any previous wrappers:\r\n\r\n```javascript\r\ncustomElements.polyfillWrapFlushCallback(function(flush) {\r\n  console.log('added first');\r\n  flush();\r\n});\r\n\r\ncustomElements.polyfillWrapFlushCallback(function(flush) {\r\n  console.log('added second');\r\n  setTimeout(() => flush(), 1000);\r\n});\r\n\r\ncustomElements.define('c-e', class extends HTMLElement {});\r\n// 'added second'\r\n// ~1s delay\r\n// 'added first'\r\n// The document is walked to attempt upgrades.\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webcomponents/custom-elements.git"
  },
  "scripts": {
    "bower-install": "$(npm bin)/bower install",
    "build": "$(npm bin)/gulp",
    "test": "$(npm bin)/wct"
  },
  "version": "1.0.0-rc.3"
}
